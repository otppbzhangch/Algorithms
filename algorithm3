3. Find combination of numbers summing to a given number

class Program
    {
        private static List<int> inputs = new List<int> { 2, 4, 6, 8 };
        private static List<List<int>> answers = new List<List<int>>();
        private static int target = 8;

        private static void findCombination(List<int> numbers, int sum)
        {
            if (sum < 0)
                return;

            if (sum == 0)
            {
                List<int> combination = new List<int>(numbers);
                answers.Add(combination);
                return;
            }

            for (int i = 0; i < inputs.Count; i++)
            {
                numbers.Add(inputs[i]);
                findCombination(numbers, sum - inputs[i]);
                numbers.RemoveAt(numbers.Count - 1);
            }
        }

        static void Main(string[] args)
        {
            findCombination(new List<int>(), target);
            StringBuilder sb = new StringBuilder();
            answers.ForEach(a=>sb.Append($"({String.Join(",", a)})"));
            Console.WriteLine(sb.ToString());
            Console.ReadKey();
        }
    }

4. Pattern matching
https://www.geeksforgeeks.org/match-a-pattern-and-string-without-using-regular-expressions/

class Program
    {
        private static String input = "GraTreGra";
        private static String pattern = "aba";
        private static Dictionary<char, string> map = new Dictionary<char, string>();

        private static bool matched(int currInputIndex, int currPatternIndex)
        {
            if (currInputIndex==input.Length && currPatternIndex == pattern.Length)
                return true;
            if (currInputIndex == input.Length || currPatternIndex == pattern.Length)
                return false;

            if (map.ContainsKey(pattern[currPatternIndex]))
            {
                string currPattern = map[pattern[currPatternIndex]];
                if (currInputIndex + currPattern.Length > input.Length || !input.Substring(currInputIndex, currPattern.Length).Equals(currPattern))
                    return false;
                return matched(currInputIndex + currPattern.Length, currPatternIndex + 1);
            }

            for (int i = 1; i < input.Length - currInputIndex; i++)
            {
                map[pattern[currPatternIndex]] = input.Substring(currInputIndex, i);
                if (matched(currInputIndex + i, currPatternIndex + 1))
                    return true;
                map.Remove(pattern[currPatternIndex]);
            }
            return false;
        }

        static void Main(string[] args)
        {
            if (matched(0, 0))
                foreach(KeyValuePair<char, string> kv in map)
                    Console.WriteLine($"{kv.Key}:{kv.Value}");
            Console.ReadKey();
        }
    }
