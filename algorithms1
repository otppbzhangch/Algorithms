1. Check whether a string can be written as repeated substring

using System;
using System.Collections.Generic;
					
public class Program
{
	private static String input = "abab";
	private static List<Char> substring = new List<Char>();
	private static String result = "true";
	
	public static void Main()
	{
		if(String.IsNullOrEmpty(input))
		   result = "false";
		substring.Add(input[0]);
		int i=1;
		while(i<input.Length && input[i]!=substring[0])
			substring.Add(input[i++]);
	
		int length = substring.Count;
		if (input.Length%length != 0)
			result = "false";
		else
		{
			String target = String.Join("",substring);
			int j = (int)input.Length/length;
			for(int k=1; k<j; k++)
			{
				Console.WriteLine(string.Format("checking {0} to {1}", input.Substring(k*length,length), target));
				if(!input.Substring(k*length,length).Equals(target))
				{
					result = "false";break;
				}
			}
		}
		Console.WriteLine(result);
	}
}

2. Shortest suub-array containing numbers that happen the most frequent
class Program
    {
        private static int[] nums = { 1, 2, 3, 2, 4 };

        static void Main(string[] args)
        {
            Dictionary<int, Tuple<int, int, int>> count = new Dictionary<int, Tuple<int, int, int>>();

            int max = 0;

            for(int i=0; i<nums.Length; i++)
            {
                if (count.ContainsKey(nums[i]))
                    count[nums[i]]= new Tuple<int, int, int>(count[nums[i]].Item1+1,
                        count[nums[i]].Item2, i);
                else
                    count.Add(nums[i], new Tuple<int, int, int>(1, i, i));
                if (count[nums[i]].Item1 > count[nums[max]].Item1)
                    max = i;
            }

            string result = String.Join(",", nums.Skip(count[nums[max]].Item2).Take(count[nums[max]].Item3));
            Console.WriteLine($"[{result}]");

            Console.ReadKey();

        }
        
    }
