1. Minimize unique char in A
https://www.geeksforgeeks.org/minimize-number-unique-characters-string/

    class Program
    {
        //private static char[] A = { 'a', 'b', 'a', 'b', 'a' };
        //private static char[] B = { 'b', 'a', 'b', 'a', 'b' };
        private static char[] A = { 'a', 'a', 'a', 'a', 'a' };
        private static char[] B = { 'b', 'b', 'a', 'b', 'b' };
        private static Dictionary<char, int> count = new Dictionary<char, int>();
        private static int minSwap = 15;

        private static void updateCount(char c, int currIdx)
        {
            int val;
            if (count.TryGetValue(c, out val))
                count[c] = ++val;
            else
                count[c] = 1;

            findMinSwap(currIdx + 1);

            if (--count[c] == 0)
                count.Remove(c);
        }

        private static void findMinSwap(int currIdx)
        {
            if (currIdx == A.Length)
            {
                minSwap = Math.Min(minSwap, count.Count);
                return;
            }

            updateCount(A[currIdx], currIdx);
            updateCount(B[currIdx], currIdx);
        }

        static void Main(string[] args)
        {
            findMinSwap(0);
            Console.WriteLine($"minSwap: {minSwap}");
            Console.ReadKey();
        }
    }
    
2. Print lexicographical order of string
https://www.geeksforgeeks.org/print-all-the-combinations-of-a-string-in-lexicographical-order/

    class Program
    {
        private static string input = "ABC";
        private static List<string> answers = new List<string>();
        
        private static void getCombinations(string curr, string str)
        {
            if (str.Length < 2)
            {
                answers.AddRange(new List<string>() { str });
                return;
            }

            if (str.Length == 2)
            {
                answers.AddRange(new List<string>()
                {
                    curr + str.Substring(0,1),
                    curr + str.Substring(0,1)+str.Substring(1,1),
                    curr + str.Substring(1,1),
                    curr + str.Substring(1,1)+str.Substring(0,1),
                });
                return;
            }

            for (int i = 0; i < str.Length; i++)
            {
                string ch = str.Substring(i, 1);
                str = str.Remove(i, 1);
                getCombinations(ch, str);
                str = str.Insert(i, ch);
            }
        }

        static void Main(string[] args)
        {
            getCombinations("", input);
            Console.ReadKey();
        }
    }
