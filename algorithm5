1. Find path from corner to center
https://www.geeksforgeeks.org/find-paths-from-corner-cell-to-middle-cell-in-maze/

    class Program
    {
        private static int[,] maze =
        {
            { 3, 5, 4, 4, 7, 3, 4, 6, 3 },
            { 6, 7, 5, 6, 6, 2, 6, 6, 2 },
            { 3, 3, 4, 3, 2, 5, 4, 7, 2 },
            { 6, 5, 5, 1, 2, 3, 6, 5, 6 },
            { 3, 3, 4, 3, 0, 1, 4, 3, 4 },
            { 3, 5, 4, 3, 2, 2, 3, 3, 5 },
            { 3, 5, 4, 3, 2, 6, 4, 4, 3 },
            { 3, 5, 1, 3, 7, 5, 3, 6, 4 },
            { 6, 2, 4, 3, 4, 5, 4, 5, 1 },
        };
        private static Tuple<int, int> start = new Tuple<int, int>(0, 0);

        private static bool[,] visited = new bool[9,9];
        private static List<List<Tuple<int, int>>> answers = new List<List<Tuple<int, int>>>();
        private static int[] dx = {-1, 1, 0, 0 };
        private static int[] dy = {0, 0, -1, 1 };

        private static bool isValid(Tuple<int, int> curr)
        {
            return 0 <= curr.Item1 && curr.Item1 <= 8
                && 0 <= curr.Item2 && curr.Item2 <= 8
                && !visited[curr.Item1, curr.Item2];
        }
        
        private static void findPaths(List<Tuple<int, int>> paths, Tuple<int, int> curr)
        {
            if (curr.Item1 == 4 && curr.Item2 == 4)
            {
                answers.Add(new List<Tuple<int, int>>(paths));
                return;
            }

            int nextR, nextC, n;
            for (int i = 0; i < 4; i++)
            {
                n = maze[curr.Item1, curr.Item2];
                nextR = curr.Item1 + dx[i] * n;
                nextC = curr.Item2 + dy[i] * n;

                Tuple<int, int> next = new Tuple<int, int>(nextR, nextC);

                if (isValid(next))
                {
                    visited[nextR, nextC] = true;
                    paths.Add(new Tuple<int, int>(nextR, nextC));
                    findPaths(paths, next);
                    paths.Remove(next);
                    visited[nextR, nextC] = false;
                }
            }

        }

        private static void printAnswers()
        {
            foreach (var a in answers)
            {
                Console.WriteLine("path:");
                a.ForEach(p => Console.Write(string.Format($"({p.Item1},{p.Item2})")));
                Console.WriteLine();
            }
        }

        static void Main(string[] args)
        {
            for (int i = 0; i < 9; i++)
                for (int j = 0; j < 9; j++)
                    visited[i,j] = false;

            findPaths(new List<Tuple<int, int>>(), start);
            printAnswers();

            Console.ReadKey();
        }
    }


2. Shortest path to avoid landmines
https://www.geeksforgeeks.org/find-shortest-safe-route-in-a-path-with-landmines/

    class Program
    {
        private static int M = 12;
        private static int N = 10;

        private static int[,] land =
        {
            { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },
            { 1,  0,  1,  1,  1,  1,  1,  1,  1,  1 },
            { 1,  1,  1,  0,  1,  1,  1,  1,  1,  1 },
            { 1,  1,  1,  1,  0,  1,  1,  1,  1,  1 },
            { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },
            { 1,  1,  1,  1,  1,  0,  1,  1,  1,  1 },
            { 1,  0,  1,  1,  1,  1,  1,  1,  0,  1 },
            { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },
            { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },
            { 0,  1,  1,  1,  1,  0,  1,  1,  1,  1 },
            { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },
            { 1,  1,  1,  0,  1,  1,  1,  1,  1,  1 },
        };
        
        private static bool[,] visited = new bool[M, N];
        private static List<Tuple<int, int>> minPath = new List<Tuple<int, int>>();
        private static int minMove = M*N;
        private static int[] dx = {-1, 1, 0, 0 };
        private static int[] dy = {0, 0, -1, 1 };

        private static bool isValid(int row, int col)
        {
            return 0 <= row && row < M
                && 0 <= col && col < N
                && land[row, col] == 1
                && !visited[row, col];
        }

        private static void init()
        {
            int i, j;
            for (i = 0; i < M; i++)
                for (j = 0; j < N; j++)
                    visited[i, j] = false;

            for (i = 0; i < M; i++)
                for (j = 0; j < N; j++)
                    if (land[i, j] == 0)
                        for (int k = 0; k < 4; k++)
                            if (isValid(i + dx[k], j + dy[k]))
                                land[i + dx[k], j + dy[k]] = -1;
        }

        private static void printLand()
        {
            int i, j;
            for (i = 0; i < M; i++)
            {
                Console.WriteLine();
                for (j = 0; j < N; j++)
                    Console.Write(land[i, j] + " ");
            }
        }

        private static void findPaths(List<Tuple<int, int>> currPath, int row, int col)
        {
            if (col == N-1)
            {
                if (currPath.Count < minMove)
                {
                    minPath.Clear();
                    currPath.ForEach(c => minPath.Add(new Tuple<int, int>(c.Item1, c.Item2)));
                    minMove = minPath.Count;
                }
                return;
            }

            int nextR, nextC;

            for (int i = 0; i < 4; i++)
            {
                visited[row, col] = true;
                currPath.Add(new Tuple<int, int>(row, col));

                nextR = row + dx[i];
                nextC = col + dy[i];

                if (isValid(nextR, nextC))
                {
                    Console.WriteLine(nextR + ", " + nextC);
                    findPaths(currPath, nextR, nextC);
                }
                currPath.Remove(new Tuple<int, int>(row, col));
                visited[row, col] = false;

            }

        }

        private static void printPath()
        {
            Console.WriteLine("min num moves: " + (minPath.Count > 0? minMove.ToString() : "non-exist"));
            minPath.ForEach(p => Console.Write(string.Format($"({p.Item1},{p.Item2})")));
        }

        static void Main(string[] args)
        {
            init();
            printLand();
            for (int i = 0; i < M; i++)
                if (isValid(i, 0))
                    findPaths(new List<Tuple<int, int>>(), i, 0);
            printPath();

            Console.ReadKey();
        }
    }
